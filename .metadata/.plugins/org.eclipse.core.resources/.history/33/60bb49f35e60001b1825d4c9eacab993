package com.kh.toy.member.model.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.kh.toy.common.code.ErrorCode;
import com.kh.toy.common.exception.DataAccessException;
import com.kh.toy.common.jdbc.JDBCTemplate;
import com.kh.toy.member.model.vo.Member;



public class MemberDao {

	JDBCTemplate jdt = JDBCTemplate.getInstanct();

	public Member memberAuthenticate(Connection conn, String userId, String password) {
		Member member = null;
		PreparedStatement pstm = null;
		ResultSet rset = null;

		try {
			String query = "select * from tb_member where user_id = ? and password = ? and is_leave = 0";
			pstm = conn.prepareStatement(query);

			pstm.setString(1, userId);
			pstm.setString(2, password);

			rset = pstm.executeQuery();

			if (rset.next()) {
				member = new Member();
				member.setUserId(rset.getString("user_id"));
				member.setPassword(rset.getString("password"));
				member.setGrade(rset.getString("grade"));
				member.setGrade(rset.getString("grade"));
				member.setTell(rset.getString("tell"));
				member.setRegDate(rset.getDate("reg_date"));
				member.setEmail(rset.getString("email"));
				member.setRentableDate(rset.getDate("rentable_date"));
			}
		} catch (SQLException e) {
			//e.printStackTrace(); custom에서 찍고있어서 여기서 이제 안찍어줘도됨
			//이제 enum 자체를 넘겨줄꺼임 왜냐면 이제 굳이 에러내용을 보내줄 필요가 없어졌기 때문임. enum 자체를 보낼거임
			throw new DataAccessException(ErrorCode.SM01,e);
		} finally {
			jdt.close(rset, pstm);
		}

		return member;
	}

	public Member selectMemberById(Connection conn, String userId) {
		Member member = null;
		PreparedStatement pstm = null;
		ResultSet rset = null;

		try {
			
			String query = "select * from tb_member where user_id = ?";
			pstm = conn.prepareStatement(query);
			pstm.setString(1, userId);

			rset = pstm.executeQuery();
			if (rset.next()) {
				member = new Member();
				member.setUserId(rset.getString("user_id"));
				member.setGrade(rset.getString("grade"));
				member.setTell(rset.getString("tell"));
				member.setRegDate(rset.getDate("reg_date"));
				member.setEmail(rset.getString("email"));
				member.setIsLeave(rset.getInt("is_leave"));
			}
		} catch (SQLException e) {
			
			throw new DataAccessException(ErrorCode.SM01,e);
		} finally {
			jdt.close(rset, pstm);
		}
		return member;
	}

	public ArrayList<Member> selectMemberList(Connection conn) {
		ArrayList<Member> memberList = new ArrayList<Member>();
		PreparedStatement pstm = null;
		ResultSet rset = null;

		try {
			String query = "select * from tb_member";
			pstm = conn.prepareStatement(query);
			rset = pstm.executeQuery();
			while (rset.next()) {
				Member member = new Member();
				member.setUserId(rset.getString("user_id"));
				member.setPassword(rset.getString("password"));
				member.setGrade(rset.getString("grade"));
				member.setTell(rset.getString("tell"));
				member.setRegDate(rset.getDate("reg_date"));
				member.setEmail(rset.getString("email"));
				member.setIsLeave(rset.getInt("is_leave"));
				memberList.add(member);

			}
			
		} catch (SQLException e) {
			//SQLException : checked Exception
			//checked Exception을 받아서 unchecked Exception으로 변환해서 반환.
			throw new DataAccessException(ErrorCode.SM01,e);
		} finally {
			jdt.close(rset, pstm);
		}

		return memberList;
	}

	public int insertMember(Connection conn, Member member) {
		//commit rollback 해야하는 기능
		int res = 0;
		PreparedStatement pstm = null;
		try {
			String query = "insert into tb_member(user_id, password, email, tell) values (?,?,?,?)";
			pstm = conn.prepareStatement(query);
			pstm.setString(1, member.getUserId());
			pstm.setString(2, member.getPassword());
			pstm.setString(3, member.getEmail());
			pstm.setString(4, member.getTell());
			res = pstm.executeUpdate(); 
			// 실행하면 실제로 db에 dml구문이 실행되며 row 한줄이 들어간다, 리턴값은 쿼리로인해 영향(추가변경삭제)받은 row의 수를 반환! 1줄추가되면 res가 1, 실패라면 0
			// res로 결과반영여부 판단
		} catch (SQLException e) {
			throw new DataAccessException(ErrorCode.IM01,e);
		} finally {
			jdt.close(pstm);
		}

		return res;
	}

	public int updateMember(Connection conn, Member member) {
		int res = 0;
		PreparedStatement pstm = null;
		String query = "update tb_member set password = ? where user_id = ?";

		try {
			pstm = conn.prepareStatement(query);
			pstm.setString(1, member.getPassword());
			pstm.setString(2, member.getUserId());
			res = pstm.executeUpdate();
		} catch (SQLException e) {
			throw new DataAccessException(ErrorCode.UM01,e);
		} finally {
			jdt.close(pstm);
		}

		return res;
	}

	public int deleteMember(Connection conn, String userId) {
		int res = 0;
		PreparedStatement pstm = null;
		String queryIsLeave = "update tb_member set is_leave = 1 where user_id = ?";

		try {
			conn = jdt.getConnection();
			pstm = conn.prepareStatement(queryIsLeave);
			pstm.setString(1, userId);
			res = pstm.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException(ErrorCode.DM01,e);
		} finally {
			jdt.close(pstm);
		}
		return res;
	}

	public List<Member> selectMemberByRegdate(Connection conn, Date begin, Date end) {
		List<Member> memberList = new ArrayList<>();
		PreparedStatement pstm = null;
		ResultSet rset = null;

		try {
			String query = "select * from tb_member where reg_date between ? and  ?";
			pstm = conn.prepareStatement(query);
			pstm.setDate(1, begin);
			pstm.setDate(2, end);
			rset = pstm.executeQuery();

			while (rset.next()) {
				Member member = new Member();
				member.setUserId(rset.getString("user_id"));
				member.setGrade(rset.getString("grade"));
				member.setEmail(rset.getString("email"));
				member.setTell(rset.getString("tell"));
				member.setPassword(rset.getString("password"));
				member.setRegDate(rset.getDate("reg_date"));
				memberList.add(member);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException(ErrorCode.SM01,e);
		} finally {
			jdt.close(rset, pstm);
		}

		return memberList;
	}
}
